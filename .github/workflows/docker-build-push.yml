name: Build, Push & Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create service account file
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT }}" > service-account.json

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: shareef945/jarvis:latest
          platforms: linux/arm64
          cache-from: type=registry,ref=shareef945/jarvis:buildcache
          cache-to: type=registry,ref=shareef945/jarvis:buildcache,mode=max

      # - name: Deploy to Staging Server
      #   if: env.ENVIRONMENT == 'staging' && (steps.check-api.outputs.changed == 'true' || steps.check-communications.outputs.changed == 'true')
      #   run: |
      #     # Create backup of current deployment
      #     ssh shareef@192.168.100.3 'cd /home/shareef/apps/swift && docker compose pull && \
      #     cp docker-compose.yml docker-compose.yml.backup-$(date +%Y%m%d_%H%M%S) && \
      #     echo ${{ env.VERSION }} > .current-version'

      #     # Deploy new version
      #     ssh shareef@192.168.100.3 '
      #       cd /home/shareef/apps/swift && \
      #       docker compose pull && \
      #       docker compose up -d --remove-orphans && \
      #       ./health-check.sh || (docker compose -f docker-compose.yml.backup-* up -d && exit 1)
      #     '

      # - name: Send Telegram notification
      #   if: always() && (steps.check-api.outputs.changed == 'true' || steps.check-communications.outputs.changed == 'true')
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     message: |
      #       ${{ job.status == 'success' && 'üöÄ' || '‚ùå' }} ${{ env.ENVIRONMENT == 'prod' && 'Production' || 'Staging' }} Deployment Status

      #       Changes detected in:
      #       ${{ steps.check-api.outputs.changed == 'true' && '- API' || '' }}
      #       ${{ steps.check-communications.outputs.changed == 'true' && '- Communications' || '' }}

      #       Environment: ${{ env.ENVIRONMENT }}
      #       Status: ${{ job.status == 'success' && 'Success ‚úÖ' || 'Failed ‚ùå' }}

      #       ${{ env.ENVIRONMENT == 'prod' && format('Server Status:
      #       - Server 1: {0}
      #       - Server 2: {1}',
      #       steps.prod-deploy.outputs.prod1_status == '0' && '‚úÖ' || '‚ùå',
      #       steps.prod-deploy.outputs.prod2_status == '0' && '‚úÖ' || '‚ùå') || '' }}

      #       ${{ job.status != 'success' && '‚ö†Ô∏è Check GitHub Actions for detailed error logs' || '' }}
